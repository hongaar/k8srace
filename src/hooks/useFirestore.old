import {
  collection,
  deleteDoc,
  doc,
  DocumentData,
  getFirestore,
  onSnapshot,
  query,
  QueryConstraint,
  setDoc,
} from "firebase/firestore"
import { useCallback, useEffect, useMemo, useState } from "react"
import { AddId, Collection, Doc } from "../api"
import { useFirebase } from "./useFirebase"

export function useFirestore() {
  const firebase = useFirebase()
  const firestore = useMemo(() => {
    return getFirestore(firebase.app)
  }, [firebase])

  return firestore
}

export function useCollectionRef(collectionId: Collection) {
  const firestore = useFirestore()

  return useMemo(
    () => collection(firestore, collectionId),
    [collectionId, firestore]
  )
}

export function useLiveCollection<T extends Collection>(collectionId: T) {
  const [data, setData] = useState<AddId<Doc[T]>[]>()
  const collectionRef = useCollectionRef(collectionId)

  useEffect(() => {
    console.debug("Registering listener for " + collectionId)

    const unsubscribe = onSnapshot(collectionRef, function (querySnapshot) {
      console.debug("Received new snapshot for " + collectionId)
      const data: AddId<Doc[T]>[] = []
      querySnapshot.forEach(function (doc) {
        data.push({ id: doc.id, ...doc.data() } as AddId<Doc[T]>)
      })
      setData(data)
    })

    return () => {
      console.debug("Unregistering listener for " + collectionId)
      unsubscribe()
    }
  }, [collectionId, collectionRef])

  return data
}

export function useLiveQuery<T extends Collection>(
  collectionId: T,
  ...queryConstraints: QueryConstraint[]
) {
  const [data, setData] = useState<AddId<Doc[T]>[]>()
  const collectionRef = useCollectionRef(collectionId)

  useEffect(() => {
    console.debug("Registering query listener for " + collectionId)

    const queryRef = query(collectionRef, ...queryConstraints)
    const unsubscribe = onSnapshot(queryRef, function (querySnapshot) {
      console.debug("Received new query snapshot for " + collectionId)
      const data: AddId<Doc[T]>[] = []
      querySnapshot.forEach(function (doc) {
        data.push({ id: doc.id, ...doc.data() } as AddId<Doc[T]>)
      })
      setData(data)
    })

    return () => {
      console.debug("Unregistering query listener for " + collectionId)
      unsubscribe()
    }
  }, [collectionId, collectionRef, queryConstraints])

  return data
}

export function useDocRef(collectionId: Collection, docId: string) {
  const firestore = useFirestore()

  return useMemo(
    () => doc(collection(firestore, collectionId), docId),
    [collectionId, docId, firestore]
  )
}

export function useLiveDoc<T extends DocumentData>(
  collectionId: Collection,
  docId: string
) {
  const [data, setData] = useState<T>()
  const docRef = useDocRef(collectionId, docId)

  useEffect(() => {
    console.debug("Registering listener for " + collectionId + ":" + docId)

    const unsubscribe = onSnapshot(docRef, function (doc) {
      console.debug("Received new snapshot for " + collectionId + ":" + docId)
      setData(doc.data() as T)
    })

    return () => {
      console.debug("Unregistering listener for " + collectionId + ":" + docId)
      unsubscribe()
    }
  }, [collectionId, docId, docRef])

  return data
}

export function useDocWriter<T extends Collection>(collectionId: T) {
  const collectionRef = useCollectionRef(collectionId)

  return useCallback(
    async function (docId: string, data: Partial<Doc[T]>) {
      await setDoc(doc(collectionRef, docId), data, { merge: true })
    },
    [collectionRef]
  )
}

export function useDocDeleter(collectionId: Collection) {
  const collectionRef = useCollectionRef(collectionId)

  return useCallback(
    async function (docId: string) {
      await deleteDoc(doc(collectionRef, docId))
    },
    [collectionRef]
  )
}
